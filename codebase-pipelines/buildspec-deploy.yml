version: 0.2

phases:
  build:
    commands:
      - set -e
      - TASK_FAMILY="${APPLICATION}-${ENVIRONMENT}-${SERVICE}"
      - CLUSTER="${APPLICATION}-${ENVIRONMENT}"
      - IMAGE_URI="${REPOSITORY_URL}:${IMAGE_TAG}"
      # Assume environment role
      - ACCOUNT_ID=$(echo ${ENV_CONFIG} | jq -c -r .${ENVIRONMENT}.accounts.deploy.id)
      - assumed_role=$(aws sts assume-role --role-arn "arn:aws:iam::$ACCOUNT_ID:role/${APPLICATION}-${ENVIRONMENT}-codebase-pipeline-deploy" --role-session-name "${ENVIRONMENT}-codebase-pipeline-deploy")
      - export AWS_ACCESS_KEY_ID=$(echo $assumed_role | jq -r .Credentials.AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $assumed_role | jq -r .Credentials.SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $assumed_role | jq -r .Credentials.SessionToken)
      # Get service name
      - SERVICE_NAME=$(aws ecs list-services --cluster ${CLUSTER} | jq -r '.serviceArns[] | select(contains("'${CLUSTER}'-'${SERVICE}'-Service"))' | cut -d '/' -f3)
      # Update task definition
      - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "${TASK_FAMILY}")
      - NEW_TASK_DEFINITION=$(echo ${TASK_DEFINITION} | jq --arg IMAGE "$IMAGE_URI" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) |  del(.registeredAt)  | del(.registeredBy)')
      - NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")
      - NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
      # Start deployment
      - start=$( date +%s )
      - timeout=1800
      - deploy_status="IN_PROGRESS"
      - aws ecs update-service --cluster "${CLUSTER}" --service "${SERVICE_NAME}" --task-definition "${TASK_FAMILY}:${NEW_REVISION}" > /dev/null 2>&1
      # Check deployment status
      - |
        while [[ "$deploy_status" == "IN_PROGRESS" || "$deploy_status" == "PENDING" || "$deploy_status" == "ROLLBACK_IN_PROGRESS" ]];
        do
          sleep 10
          now=$( date +%s )
          elapsed=$(( now-start ))
        
          deploy_status=$(aws ecs list-service-deployments --cluster "${CLUSTER}" --service "${SERVICE_NAME}" --created-at "after=${start}" | jq -r '.serviceDeployments[0].status')
          echo "Deployment status after $elapsed seconds: $deploy_status"
        
          if [[ $elapsed -gt $timeout ]]; then
            echo "Error: deployment not completed in $timeout seconds"
            exit 1
          fi
        done
      # Check deployment success
      - |
        if [ "$deploy_status" != "SUCCEEDED" ]; then 
          echo "Error: deployment did not succeed"
          exit 1
        fi
